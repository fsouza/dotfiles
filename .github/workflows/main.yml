name: Build
on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main
jobs:
  bootstrap:
    strategy:
      matrix:
        os:
          - macos-13
          - ubuntu-latest

    name: bootstrap
    runs-on: ${{ matrix.os }}
    steps:
      - name: install neovim (macos)
        if: runner.os == 'macOS'
        run: |
          curl -L https://github.com/neovim/neovim/releases/download/nightly/nvim-macos.tar.gz | sudo tar -C /usr/local --strip 1 -xzf -

      - name: install neovim (linux)
        if: runner.os == 'Linux'
        run: |
          curl -L https://github.com/neovim/neovim/releases/download/nightly/nvim-linux64.tar.gz | sudo tar -C /usr/local --strip 1 -xzf -

      - name: install zsh & linuxbrew on Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y zsh
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          echo "PATH=/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:${PATH}" >>${GITHUB_ENV}
        env:
          NONINTERACTIVE: 1

      - name: set brew env vars
        run: |
          echo "HOMEBREW_PREFIX=$(brew --prefix)" >>${GITHUB_ENV}
          echo "HOMEBREW_NO_INSTALL_CLEANUP=1" >>${GITHUB_ENV}
          echo "HOMEBREW_NO_INSTALL_FROM_API=" >>${GITHUB_ENV}
          echo "HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1" >>${GITHUB_ENV}

      - name: install early dependencies
        run: |
          brew update
          brew install coreutils jq

      - uses: actions/checkout@v4.1.1

      - uses: actions/setup-go@v5.0.0
        with:
          go-version: "1.x"
          cache-dependency-path: nvim/langservers/go.sum

      - name: get repo versions
        id: get-repo-versions
        run: |
          git ls-remote https://github.com/golang/tools.git master | awk '{print "golang-tools-version=" $1}' >>${GITHUB_OUTPUT}
          git ls-remote https://git.sr.ht/~technomancy/fnlfmt master | awk '{print "fnlfmt-version=" $1}' >>${GITHUB_OUTPUT}
          git ls-remote https://github.com/luajit/luajit.git v2.1 | awk '{print "luajit-version=" $1}' >>${GITHUB_OUTPUT}

      - name: langservers cache
        id: nvim-langservers-cache
        uses: actions/cache@v4.0.0
        with:
          path: ~/.cache/nvim/langservers
          key: "${{ runner.os }}-${{ hashFiles('tools/nvim-bootstrap/*.go') }}-${{ steps.get-repo-versions.outputs.golang-tools-version }}-${{ steps.get-repo-versions.outputs.fnlfmt-version }}"
          restore-keys: "${{ runner.os }}-${{ hashFiles('tools/nvim-bootstrap/*.go') }}-"

      - name: get versions from brew
        id: brew-versions
        run: |
          echo "pcre-version=$(brew info pcre --json | jq -r '.[0].versions.stable')" >>${GITHUB_OUTPUT}
          echo "mise-version=$(brew info mise --json | jq -r '.[0].versions.stable')" >>${GITHUB_OUTPUT}

      - name: set MISE_DATA_DIR
        run: |
          echo "MISE_DATA_DIR=${HOME}/.local/share/mise" >>${GITHUB_ENV}

      - name: set MACOSX_DEPLOYMENT_TARGET
        id: macosx-deployment-target
        run: |
          echo "MACOSX_DEPLOYMENT_TARGET=$(sw_vers -productVersion)" >>${GITHUB_ENV}
          echo "product-version=$(sw_vers -productVersion)" >>${GITHUB_OUTPUT}

      - name: mise cache
        id: mise-cache
        uses: actions/cache@v4.0.0
        with:
          path: ~/.local/share/mise
          key: "${{ runner.os }}-${{ steps.brew-versions.outputs.mise-version }}"

      - name: hererocks cache
        id: nvim-hererocks-cache
        uses: actions/cache@v4.0.0
        with:
          path: ~/.cache/nvim/hr
          key: "${{ runner.os }}-${{ steps.brew-versions.outputs.pcre-version }}-${{ steps.get-repo-versions.outputs.luajit-version }}-${{ steps.macosx-deployment-target.outputs.product-version }}-${{ hashFiles('nvim/vimfiles-dev-1.rockspec') }}"

      - name: virtualenv cache
        id: nvim-virtualenv-cache
        uses: actions/cache@v4.0.0
        with:
          path: ~/.cache/nvim/venv
          key: "${{ runner.os }}-${{ hashFiles('nvim/langservers/requirements.txt') }}-${{ steps.brew-versions.outputs.mise-version }}"

      # this will always cache miss, but the idea is to reuse work between
      # pushes by leveraging restore-keys.
      - name: mr cache
        id: mr-cache
        uses: actions/cache@v4.0.0
        with:
          path: ~/.local/share/nvim/site/pack/mr
          key: "${{ runner.os }}-${{ hashFiles('nvim/mrconfig') }}-${{ github.sha }}"
          restore-keys: "${{ runner.os }}-${{ hashFiles('nvim/mrconfig') }}-"

      - name: run setup
        run: |
          timeout -k 10s 30m ./bootstrap/setup

      - name: nvim lint & tests
        run: |
          env FSOUZA_DOTFILES_DIR=${PWD} make nvim-tests nvim-lint
        env:
          NVIM_TEST_TIMEOUT: 10000

  unblock-pr:
    name: unblock-pr
    runs-on: ubuntu-latest
    needs:
      - bootstrap
    steps:
      - run: "true"
