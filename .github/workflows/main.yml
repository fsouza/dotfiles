name: Build
on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main
jobs:
  bootstrap:
    strategy:
      matrix:
        os:
          - macos-latest
          - ubuntu-latest

    name: bootstrap
    runs-on: ${{ matrix.os }}
    steps:
      - name: install neovim (macos)
        if: runner.os == 'macOS'
        run: |
          curl -L https://github.com/neovim/neovim/releases/download/nightly/nvim-macos-$(uname -m).tar.gz | sudo tar -C /usr/local --strip 1 -xzf -

      - name: install neovim (linux)
        if: runner.os == 'Linux'
        run: |
          curl -L https://github.com/neovim/neovim/releases/download/nightly/nvim-linux-$(uname -m).tar.gz | sudo tar -C /usr/local --strip 1 -xzf -

      - name: install zsh & linuxbrew on Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y zsh
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          echo "PATH=/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:${PATH}" >>${GITHUB_ENV}
        env:
          NONINTERACTIVE: 1

      - name: set brew env vars
        run: |
          echo "HOMEBREW_PREFIX=$(brew --prefix)" >>${GITHUB_ENV}
          echo "HOMEBREW_NO_INSTALL_CLEANUP=1" >>${GITHUB_ENV}
          echo "HOMEBREW_NO_INSTALL_FROM_API=" >>${GITHUB_ENV}
          echo "HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1" >>${GITHUB_ENV}

      - name: install early dependencies
        run: |
          brew update
          brew install coreutils jq

      - uses: actions/checkout@v4.3.0

      - name: set product-version
        id: os-deployment-target
        run: |
          if [[ ${RUNNER} == "macOS" ]]; then
            echo "MACOSX_DEPLOYMENT_TARGET=$(sw_vers -productVersion)" >>${GITHUB_ENV}
            echo "product-version=$(sw_vers -productVersion)" >>${GITHUB_OUTPUT}
          else
            echo "product-version=$(lsb_release -ds)" >>${GITHUB_OUTPUT}
          fi
          echo "arch=$(uname -m)" >>${GITHUB_OUTPUT}
        env:
          RUNNER: ${{ runner.os }}

      - name: run setup
        run: |
          timeout -k 10s 30m ./bootstrap/setup

  unblock-pr:
    name: unblock-pr
    runs-on: ubuntu-latest
    needs:
      - bootstrap
    steps:
      - run: "true"
