name: Build
on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main
jobs:
  bootstrap:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-20.04
          - macos-11

    name: bootstrap-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: install neovim nightly
        run: |
          if [ "${{ runner.os }}" = "Linux" ]; then
            suffix=linux64
          else
            suffix=macos
          fi
          curl -L https://github.com/neovim/neovim/releases/download/nightly/nvim-${suffix}.tar.gz | sudo tar -C /usr/local --strip 1 -xzf -

      - name: install build deps on mac
        if: runner.os == 'macOS'
        run: |
          brew install bash shellcheck libyaml

      - name: install build deps on ubuntu
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck libyaml-dev

      - uses: actions/checkout@v2.3.4

      - run: make shellcheck

      - uses: avsm/setup-ocaml@v2
        with:
          ocaml-compiler: "4.12.0"
          dune-cache: true

      - uses: actions/setup-python@v2.2.2
        with:
          python-version: "3.x"

      - uses: actions/setup-go@v2.1.4
        with:
          go-version: "1.x"

      - uses: actions/setup-dotnet@v1.8.1
        with:
          dotnet-version: "5.x"

      - name: langservers cache
        id: nvim-langservers-cache
        uses: actions/cache@v2.1.6
        with:
          path: ~/.cache/nvim/langservers
          key: "${{ runner.os }}-${{ hashFiles('nvim/scripts/bootstrap.py') }}"

      - name: get luajit version
        id: get-luajit-version
        run: |
          echo "::set-output name=version::$(nvim --version | grep LuaJIT)"

      - name: set MACOSX_DEPLOYMENT_TARGET
        if: runner.os == 'macOS'
        id: macosx-deployment-target
        run: |
          echo "MACOSX_DEPLOYMENT_TARGET=$(sw_vers -productVersion)" >>${GITHUB_ENV}
          echo "::set-output name=product-version::$(sw_vers -productVersion)"

      - name: hererocks cache
        id: nvim-hererocks-cache
        uses: actions/cache@v2.1.6
        with:
          path: ~/.cache/nvim/hr
          key: "${{ runner.os }}-${{ steps.get-luajit-version.outputs.version }}-${{ steps.macosx-deployment-target.outputs.product-version }}-${{ hashFiles('nvim/vimfiles-dev-1.rockspec') }}"

      - name: get python version
        id: get-python-version
        run: |
          echo "::set-output name=version::$(python3 --version)"

      - name: virtualenv cache
        id: nvim-virtualenv-cache
        uses: actions/cache@v2.1.6
        with:
          path: ~/.cache/nvim/venv
          key: "${{ runner.os }}-${{ hashFiles('nvim/langservers/requirements.txt') }}-${{ steps.get-python-version.outputs.version }}"

      - name: install fnm
        run: |
          curl -fsSL https://fnm.vercel.app/install | bash
          echo "${HOME}/.fnm" >> "${GITHUB_PATH}"

      - name: run setup
        run: |
          eval $(opam env --set-switch)
          ./bin/setup

      - name: run luacheck
        run: make -f $HOME/.config/nvim/Makefile luacheck

      - name: run lua-format-check
        run: make -f $HOME/.config/nvim/Makefile lua-format-check

  pre-commit:
    name: pre-commit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4

      - uses: actions/setup-python@v2.2.2
        with:
          python-version: 3.x

      - name: install pre-commit
        run: pip install pre-commit

      - name: pre-commit cache
        uses: actions/cache@v2.1.6
        with:
          path: ~/.cache/pre-commit
          key: "${{ hashFiles('.pre-commit-config.yaml') }}"

      - run: pre-commit run --all-files --show-diff-on-failure
