name: Build
on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main
jobs:
  bootstrap:
    strategy:
      matrix:
        os:
          - macos-11
          - ubuntu-latest

    name: bootstrap
    runs-on: ${{ matrix.os }}
    steps:
      - name: install neovim (macos)
        if: runner.os == 'macOS'
        run: |
          curl -L https://github.com/neovim/neovim/releases/download/nightly/nvim-macos.tar.gz | sudo tar -C /usr/local --strip 1 -xzf -

      - name: install neovim (linux)
        if: runner.os == 'Linux'
        run: |
          curl -L https://github.com/neovim/neovim/releases/download/nightly/nvim-linux64.tar.gz | sudo tar -C /usr/local --strip 1 -xzf -

      - name: install zsh on Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y zsh

      - name: install linuxbrew
        if: runner.os == 'Linux'
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          echo "PATH=/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:$PATH" >>${GITHUB_ENV}
        env:
          NONINTERACTIVE: 1

      - name: set brew env vars
        run: |
          echo "HOMEBREW_PREFIX=$(brew --prefix)" >>${GITHUB_ENV}

      - name: install early dependencies
        run: |
          brew update
          brew install jq coreutils

      - uses: actions/checkout@v3.3.0

      - uses: actions/setup-python@v4.4.0
        id: setup-python
        with:
          python-version: "3.11"

      - uses: actions/setup-go@v3.5.0
        with:
          go-version: "1.x"

      - uses: actions/setup-java@v3.9.0
        id: setup-java
        with:
          distribution: adopt
          java-version: "17"

      - uses: fsouza/rs-toolchain@v1.1.0
        with:
          toolchain: stable
          default: true
          components: clippy, rustfmt, rust-src

      - name: langservers cache
        id: nvim-langservers-cache
        uses: actions/cache@v3.2.2
        with:
          path: ~/.cache/nvim/langservers
          key: "${{ runner.os }}-${{ hashFiles('nvim/scripts/bootstrap.py') }}-${{ steps.setup-python.outputs.python-version }}"

      - name: get luajit version
        id: get-luajit-version
        run: |
          nvim -l - <<<'print("version=" .. jit.version)' 2>>${GITHUB_OUTPUT}

      - name: get pcre version
        id: get-pcre-version
        run: |
          echo "version=$(brew info pcre --json | jq -r '.[0].versions.stable')" >>${GITHUB_OUTPUT}

      - name: set MACOSX_DEPLOYMENT_TARGET
        id: macosx-deployment-target
        run: |
          echo "MACOSX_DEPLOYMENT_TARGET=$(sw_vers -productVersion)" >>${GITHUB_ENV}
          echo "product-version=$(sw_vers -productVersion)" >>${GITHUB_OUTPUT}

      - name: hererocks cache
        id: nvim-hererocks-cache
        uses: actions/cache@v3.2.2
        with:
          path: ~/.cache/nvim/hr
          key: "${{ runner.os }}-${{ steps.get-pcre-version.outputs.version }}-${{ steps.get-luajit-version.outputs.version }}-${{ steps.macosx-deployment-target.outputs.product-version }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('nvim/vimfiles-dev-1.rockspec') }}"

      - name: virtualenv cache
        id: nvim-virtualenv-cache
        uses: actions/cache@v3.2.2
        with:
          path: ~/.cache/nvim/venv
          key: "${{ runner.os }}-${{ hashFiles('nvim/langservers/requirements.txt') }}-${{ steps.setup-python.outputs.python-version }}"

      - name: run setup
        run: |
          timeout -k 10s 30m ./bootstrap/setup

      - name: nvim lint & tests
        run: |
          env FSOUZA_DOTFILES_DIR=${PWD} make nvim-tests nvim-lint
        env:
          NVIM_TEST_TIMEOUT: 10000

  pre-commit:
    name: pre-commit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.3.0

      - uses: actions/setup-python@v4.4.0
        with:
          python-version: 3.x
          cache: pip

      - name: install pre-commit
        run: pip install pre-commit

      - name: pre-commit cache
        uses: actions/cache@v3.2.2
        with:
          path: ~/.cache/pre-commit
          key: "${{ hashFiles('.pre-commit-config.yaml') }}"

      - run: pre-commit run --all-files --show-diff-on-failure

  unblock-pr:
    name: unblock-pr
    runs-on: ubuntu-latest
    needs:
      - bootstrap
      - pre-commit
    steps:
      - run: "true"
