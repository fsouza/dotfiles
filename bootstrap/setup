#!/usr/bin/env python3
import os
import shutil
import subprocess
import sys
from pathlib import Path

BASEDIR = Path(__file__).parent.parent.absolute()


def create_symlink(name: str, source: Path, target: Path) -> None:
    if target.exists() and not target.is_symlink():
        target.unlink()

    if not target.is_symlink():
        target.symlink_to(source)


def main() -> int:
    if shutil.which("go"):
        subprocess.check_call(
            ["go", "install", "./..."],
            env={
                **os.environ,
                "GOBIN": BASEDIR / "tools" / "bin",
            },
            cwd=BASEDIR / "tools",
        )

    home = Path.home()
    config_dir = home / ".config"
    config_dir.mkdir(exist_ok=True)

    home_files = [".editorconfig"]
    for file in home_files:
        create_symlink(file, BASEDIR / file, home / file)

    xdg_items = ["bat", "rgrc", "git", "fd", "utop", "ideavim"]
    for file in xdg_items:
        create_symlink(file, BASEDIR / file, config_dir / file)

    os_setup_script = BASEDIR / "bootstrap" / f"{sys.platform}-setup"
    if os_setup_script.exists():
        subprocess.check_call([os_setup_script])

    if shutil.which("brew"):
        subprocess.check_call(["brew", "update"])
        subprocess.check_call(
            [
                "brew",
                "bundle",
                "--no-lock",
                "--file",
                BASEDIR / "bootstrap" / "Brewfile",
            ],
        )

    if shutil.which("nvim"):
        subprocess.check_call(
            ["make", "-C", BASEDIR],
            env={
                **os.environ,
                "NVIM_DEBUG": "1",
                "FSOUZA_DOTFILES_DIR": str(BASEDIR),
                "RTX_EXPERIMENTAL": "1",
            },
        )

    if shutil.which("bat"):
        subprocess.check_call(
            ["bat", "cache", "--build"],
        )

    return 0


if __name__ == "__main__":
    sys.exit(main())
