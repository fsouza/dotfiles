#!/usr/bin/env python3
import functools
import os
import re
import shutil
import subprocess
import sys
import tempfile
from pathlib import Path

line_regex = re.compile(rb"^([^:]+):\d+:(\d+:)?.+")


def main() -> int:
    lines = sys.stdin.buffer.readlines()

    if shutil.which("nvim") != "" and should_send_to_nvim(lines):
        return send_to_nvim(b"".join(lines))
    else:
        return copy(b"".join(lines))


def should_send_to_nvim(lines: list[bytes]) -> bool:
    return any(_valid_diagnostic(line) for line in lines)


def _valid_diagnostic(line: bytes) -> bool:
    m = line_regex.match(line)
    if not m:
        return False

    file_path = Path(m.group(1).decode())
    return (_panel_cwd() / file_path).exists()


@functools.lru_cache(maxsize=1)
def _panel_cwd() -> Path:
    proc = subprocess.run(
        ["tmux", "display-message", "-p", "#{pane_current_path}"],
        capture_output=True,
    )
    if proc.returncode != 0:
        raise ValueError(proc.stderr)

    return Path(proc.stdout.strip().decode())


def send_to_nvim(contents: bytes) -> int:
    fd, path = tempfile.mkstemp()
    os.write(fd, contents)
    os.close(fd)

    nvim_command = f"lua require('fsouza.plugin.tmux-selection').handle('{path}')"
    proc = subprocess.run(
        ["tmux", "split-window", "-c", _panel_cwd(), "-Z", "nvim", "-c", nvim_command],
    )
    if proc.returncode != 0:
        return proc.returncode

    return subprocess.run(["tmux", "send-keys", "C-m"]).returncode


def copy(contents: bytes) -> int:
    command = os.environ["TMUX_COPY_CMD"]

    with tempfile.TemporaryFile() as f:
        f.write(contents.rstrip())
        f.seek(0, os.SEEK_SET)

        proc = subprocess.run([command], stdin=f)
        return proc.returncode


if __name__ == "__main__":
    sys.exit(main())
