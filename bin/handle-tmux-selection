#!/usr/bin/env python3
import functools
import os
import re
import shutil
import subprocess
import sys
import tempfile
from pathlib import Path
from typing import NoReturn

line_regex = re.compile(rb"^\s*([^:]+):\d+:(\d+:)?.+")


def main() -> NoReturn:
    lines = sys.stdin.buffer.readlines()

    if len(lines) == 0:
        return handle_current_line()

    if shutil.which("nvim") != "" and should_send_to_nvim(lines):
        subprocess.run(["tmux", "send-keys", "-X", "cancel"])

        return send_to_nvim(b"".join(lines))
    else:
        return os.execlp("tmux", "tmux", "send-keys", "-X", "copy-selection-and-cancel")


def handle_current_line() -> NoReturn:
    return os.execlp(
        "tmux",
        "tmux",
        "send-keys",
        "-X",
        "select-line",
        ";",
        "send-keys",
        "-X",
        "copy-pipe-and-cancel",
        sys.argv[0],
    )


def should_send_to_nvim(lines: list[bytes]) -> bool:
    return any(_valid_diagnostic(line) for line in lines)


def _valid_diagnostic(line: bytes) -> bool:
    m = line_regex.match(line)
    if not m:
        return False

    file_path = Path(m.group(1).decode())
    return (_panel_cwd() / file_path).exists()


@functools.lru_cache(maxsize=1)
def _panel_cwd() -> Path:
    proc = subprocess.run(
        ["tmux", "display-message", "-p", "#{pane_current_path}"],
        capture_output=True,
    )
    if proc.returncode != 0:
        raise ValueError(proc.stderr)

    return Path(proc.stdout.strip().decode())


def send_to_nvim(contents: bytes) -> NoReturn:
    fd, path = tempfile.mkstemp()
    os.write(fd, contents)
    os.close(fd)

    nvim_command = f"lua require('fsouza.lib.tmux-selection').handle('{path}')"
    return os.execlp(
        "tmux",
        "tmux",
        "split-window",
        "-b",
        "-c",
        _panel_cwd(),
        "-Z",
        "nvim",
        "-c",
        nvim_command,
    )


if __name__ == "__main__":
    sys.exit(main())
