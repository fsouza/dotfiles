NEOVIM_INSTALL_PREFIX=$HOME/opt/neovim
NEOVIM_SRC_DIR=$HOME/Projects/os/3/neovim

function _ensure_neovim_src {
	if ! [ -d "${NEOVIM_SRC_DIR}" ]; then
		git clone https://github.com/fsouza/neovim.git "${NEOVIM_SRC_DIR}"
	fi
}

function _rebuild_neovim {
	(
		cd "${NEOVIM_SRC_DIR}" &&
			make \
				CMAKE_BUILD_TYPE=RelWithDebInfo \
				CMAKE_INSTALL_PREFIX="${NEOVIM_INSTALL_PREFIX}" \
				CMAKE_EXTRA_FLAGS="-DCMAKE_FIND_FRAMEWORK=LAST ${NVIM_CMAKE_EXTRA_FLAGS}" \
				BUNDLED_CMAKE_FLAG="-DUSE_BUNDLED_GPERF=OFF" &&
			make install || return
	)
}

function _update_neovim {
	_ensure_neovim_src
	git -C "${NEOVIM_SRC_DIR}" pull && _rebuild_neovim
}

function rebootstrap_neovim {
	_ensure_neovim_src
	pushd "${NEOVIM_SRC_DIR}" &&
		make distclean &&
		git clean -dfx &&
		rm -rf "${NEOVIM_INSTALL_PREFIX}" &&
		_update_neovim &&
		popd
}

function update_neovim {
	_update_neovim || rebootstrap_neovim
}

function enter_demo_mode {
	dir=~/.local/share/nvim/site/after/plugin
	mkdir -p "${dir}"
	if [[ $1 != "--no-color" ]]; then
		cat >"${dir}/demo.lua" <<EOF
require('fsouza.plugin.demo-mode').enable()
EOF
	fi
	(
		cd "${FSOUZA_DOTFILES_DIR}"
		cp alacritty.yml{,.old}
		if [[ $1 != "--no-color" ]]; then
			sd '^colors:.+' 'colors: *rose-pine-dawn' alacritty.yml
		fi
		sd 'size: .+$' 'size: 24.0' alacritty.yml
	)
}

function leave_demo_mode {
	rm -f ~/.local/share/nvim/site/after/plugin/demo.lua
	(
		cd "${FSOUZA_DOTFILES_DIR}" && test -f alacritty.yml.old && mv alacritty.yml.old alacritty.yml
	)
}

if [ -x "$NEOVIM_INSTALL_PREFIX/bin/nvim" ]; then
	prepend_to_path "$NEOVIM_INSTALL_PREFIX/bin"

	function zvim {
		nvim +'autocmd User PluginReady ++once lua vim.schedule(function() require("fsouza.plugin.fuzzy")["find-files"]() end)' "$@"
	}

	export EDITOR=nvim GIT_EDITOR=nvim MANPAGER="nvim +'Man!'"
else
	unset EDITOR GIT_EDITOR MANPAGER
fi
