export VIRTUALENVS=${HOME}/.venvs

function v() {
	name=${1}
	if [[ ${name} == "@" ]]; then
		name=$(basename "$PWD")
	fi

	virtualenvpath=${VIRTUALENVS}/${name}
	if [ -z "${name}" ]; then
		ls ${VIRTUALENVS}
	elif [ -d "${virtualenvpath}" ]; then
		if [ -z "${oldpath}" ]; then
			export oldpath=$PATH
		fi
		export PATH=${virtualenvpath}/bin:$PATH
		alias cdvirtualenv='cd ${virtualenvpath}'
		alias cdsitepackages='cd ${virtualenvpath}/lib/python*/site-packages'
		export VIRTUAL_ENV=${virtualenvpath}
		hash -r
	else
		echo >&2 "virtualenv ${name} not found"
		return 1
	fi
}

function d() {
	if [[ ! -v oldpath ]]; then
		echo >&2 "no virtualenv active"
		return 1
	fi
	export PATH=${oldpath}
	unalias cdvirtualenv cdsitepackages
	unset oldpath
	unset VIRTUAL_ENV
	hash -r
}

function _find_python() {
	python=${PYTHON:-python3}
	if [ -z "$(command -v "${python}")" ] && [[ -v HOMEBREW_PREFIX ]]; then
		path=$(ls ${HOMEBREW_PREFIX}/opt/python3*/bin/${python} | head -1)
		if [ -n "$path" ]; then
			python=$path
		fi
	fi
	echo $python
}

function mkv() {
	test -d ${VIRTUALENVS} || mkdir -p ${VIRTUALENVS}
	name=${1:-$(basename "${PWD}")}

	# create the env only if it doesn't exist yet
	if ! [ -d "${VIRTUALENVS}/${name}" ]; then
		virtualenv -p "$(_find_python)" ${VIRTUALENVS}/${name} && \
			"${VIRTUALENVS}/${name}/bin/pip" install --upgrade pip
	fi

	v $name
}

function rmv() {
	if [ -z "${1}" ]; then
		echo >&2 "Please specify the virtualenv you want to remove"
		return 2
	fi
	dir=${VIRTUALENVS}/${1}
	rm -rf ${dir}
}

function upgrade_pip() {
	for env in $(v); do
		${VIRTUALENVS}/${env}/bin/pip install -U pip
	done
}

export PIP_REQUIRE_VIRTUALENV=1

alias cv="which python"
