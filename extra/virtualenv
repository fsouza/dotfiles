export VIRTUALENVS=${HOME}/.cache/virtualenvs

VIRTUALENV_PYZ_LOCATION=${VIRTUALENVS}/virtualenv.pyz

function _virtualenv() {
	if ! [ -f "${VIRTUALENV_PYZ_LOCATION}" ]; then
		mkdir -p "${VIRTUALENVS}"
		curl -Lo "${VIRTUALENV_PYZ_LOCATION}" https://bootstrap.pypa.io/virtualenv.pyz
	fi
	python3 "${VIRTUALENV_PYZ_LOCATION}" "${@}"
}

function _disable_bare_python() {
	function python() {
		echo >&2 "please be explicit about the version of python you want to use"
		return 1
	}
}

function _enable_bare_python() {
	unset -f python &>/dev/null || true
}

function _activate_virtualenv() {
	virtualenvpath=${1}
	if [ -z "${oldpath}" ]; then
		export oldpath=$PATH
	fi
	export PATH=${virtualenvpath}/bin:$PATH
	alias cdvirtualenv='cd ${virtualenvpath}'
	alias cdsitepackages='cd ${virtualenvpath}/lib/python*/site-packages'
	export VIRTUAL_ENV=${virtualenvpath}
	_enable_bare_python
	hash -r
}

function v() {
	name=${1}
	if [[ ${name} == "@" ]]; then
		virtualenvpath=${PWD}/venv
	else
		virtualenvpath=${VIRTUALENVS}/${name}
	fi
	if [ -z "${name}" ]; then
		ls -F "${VIRTUALENVS}" | grep '/$' | sed -e 's,/$,,'
	elif [ -d "${virtualenvpath}" ]; then
		_activate_virtualenv "${virtualenvpath}"
	else
		echo >&2 "virtualenv ${name} not found"
		return 1
	fi
}

function d() {
	if ! [[ -v VIRTUAL_ENV ]]; then
		echo >&2 "no virtualenv active"
		return 1
	fi
	export PATH=${oldpath}
	unalias cdvirtualenv cdsitepackages
	unset oldpath
	unset VIRTUAL_ENV
	_disable_bare_python
	hash -r
}

function _find_python() {
	python=${PYTHON:-python3.9}
	if ! command -v "${python}" &>/dev/null && [[ -v HOMEBREW_PREFIX ]]; then
		path=$(fd -L "${python}"$ --type f "${HOMEBREW_PREFIX}"/opt/python*/bin | head -1)
		if [ -n "$path" ]; then
			python=$path
		fi
	fi
	echo "${python}"
}

function mkv() {
	test -d "${VIRTUALENVS}" || mkdir -p "${VIRTUALENVS}"
	name=${1}
	if [ -n "${name}" ]; then
		virtualenvpath=${VIRTUALENVS}/${name}
	else
		virtualenvpath=${PWD}/venv
	fi

	# create the env only if it doesn't exist yet
	if ! [ -d "${virtualenvpath}" ]; then
		_virtualenv -p "$(_find_python)" "${virtualenvpath}" &&
			"${virtualenvpath}/bin/pip" install --upgrade pip
	fi

	_activate_virtualenv "${virtualenvpath}"
}

function rmv() {
	if [ -z "${1}" ]; then
		echo >&2 "Please specify at least one virtualenv to remove"
		return 2
	fi
	for venv in "${@}"; do
		venv_dir=${VIRTUALENVS}/${venv}
		rm -rf "${venv_dir}"
	done
}

function upgrade_pip() {
	for env in $(v); do
		"${VIRTUALENVS}"/"${env}"/bin/pip install -U pip
	done
}

function cv() {
	if [[ -v VIRTUAL_ENV ]]; then
		which python3
	else
		echo "no virtualenv active"
	fi
}

_disable_bare_python
if [ -n "${VIRTUAL_ENV}" ]; then
	_activate_virtualenv "${VIRTUAL_ENV}"
fi
export PIP_REQUIRE_VIRTUALENV=1
export VIRTUAL_ENV_DISABLE_PROMPT=1
