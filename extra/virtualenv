export VIRTUALENVS=${HOME}/.cache/virtualenvs

VIRTUALENV_PYZ_LOCATION=${VIRTUALENVS}/virtualenv.pyz

function _download_virtualenv() {
	mkdir -p ${VIRTUALENVS}
	curl -sLo ${VIRTUALENV_PYZ_LOCATION} https://bootstrap.pypa.io/virtualenv.pyz
}

function _global_python() {
	local brew=${BREW:-brew}
	echo "$(${brew} --prefix)"/bin/python3
}

function virtualenv() {
	if ! [ -f ${VIRTUALENV_PYZ_LOCATION} ]; then
		_download_virtualenv
	fi
	"$(_global_python)" ${VIRTUALENV_PYZ_LOCATION} ${@}
}

function upgrade_virtualenv() {
	rm -f ${VIRTUALENV_PYZ_LOCATION}
	_download_virtualenv
}

function _activate_virtualenv() {
	local virtualenvpath=${1}
	prepend_to_path ${virtualenvpath}/bin
	alias cdvirtualenv="cd ${virtualenvpath}"
	alias cdsitepackages='cd '"${virtualenvpath}"'/lib/python*/site-packages'
	export VIRTUAL_ENV=${virtualenvpath}
	hash -r
}

function v() {
	local virtualenvpath
	local name=${1}

	if [[ ${name} == "@" ]]; then
		virtualenvpath=${PWD}/venv
	elif [[ ${name} == /* ]] && [ -d "${name}" ; then
		virtualenvpath=${name}
	elif [[ ${name} == .* ]] && [ -d "${name}" ]; then
		virtualenvpath=$(cd ${name} && pwd -P)
	else
		virtualenvpath=${VIRTUALENVS}/${name}
	fi
	if [ -z "${name}" ]; then
		ls -F ${VIRTUALENVS} | grep '/$' | sed -e 's,/$,,'
	elif [ -d ${virtualenvpath} ]; then
		_activate_virtualenv ${virtualenvpath}
	else
		echo >&2 "virtualenv ${name} not found"
		return 1
	fi
}

function d() {
	if ! [[ -v VIRTUAL_ENV ]]; then
		echo >&2 "no virtualenv active"
		return 1
	fi
	remove_from_path ${VIRTUAL_ENV}/bin
	unalias cdvirtualenv cdsitepackages
	unset VIRTUAL_ENV
	hash -r
}

function _find_python() {
	local python=${PYTHON:-python3.12}
	local version=$(echo ${python} | sed -e 's/python//')
	local mise_python=$(mise where python@${version} 2>/dev/null)
	if [ -n "${mise_python}" ]; then
		echo ${mise_python}/bin/python3
	else
		echo ${python}
	fi
}

function mkv() {
	mkdir -p ${VIRTUALENVS}
	local name=${1}
	if [ -n "${name}" ]; then
		virtualenvpath=${VIRTUALENVS}/${name}
	else
		virtualenvpath=${PWD}/venv
	fi

	# create the env only if it doesn't exist yet
	if ! [ -d ${virtualenvpath} ]; then
		virtualenv -p "$(_find_python)" ${virtualenvpath} &&
			${virtualenvpath}/bin/pip install --upgrade pip
	fi

	_activate_virtualenv ${virtualenvpath}
}

function rmv() {
	if [ -z "${1}" ]; then
		echo >&2 "Please specify at least one virtualenv to remove"
		return 2
	fi
	for venv in ${@}; do
		local venv_dir=${VIRTUALENVS}/${venv}
		rm -rf ${venv_dir}
	done
}

function upgrade_pip() {
	for env in "$(v)"; do
		${VIRTUALENVS}/${env}/bin/pip install -U pip
	done
}

function cv() {
	if [[ -v VIRTUAL_ENV ]]; then
		which python3
	else
		echo "no virtualenv active"
	fi
}

if [ -n "${VIRTUAL_ENV}" ]; then
	_activate_virtualenv ${VIRTUAL_ENV}
fi
export PIP_REQUIRE_VIRTUALENV=1
export VIRTUAL_ENV_DISABLE_PROMPT=1
