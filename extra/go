GO_HOME="${HOME}/.cache/go"

function _normalize_name_version {
	local name_or_version=${1}
	if grep -q '^go' <<<"${name_or_version}"; then
		echo "${name_or_version}"
	else
		echo "go${name_or_version}"
	fi
}

function refresh_go_tools {
	go install golang.org/x/tools/cmd/goimports@latest &&
		go install honnef.co/go/tools/cmd/staticcheck@latest
}

function _bootstrap_go {
	local BOOTSTRAP_GO="go1.17"
	local dest_dir=${GO_HOME}/bootstrap
	local go_binary=${dest_dir}/go/bin/go
	if ! [ -x "${go_binary}" ]; then
		mkdir -p "${dest_dir}"

		# some day I'll have to support arm64, that day isn't today.
		curl -sL "https://golang.org/dl/${BOOTSTRAP_GO}.$(uname -s | tr '[:upper:]' '[:lower:]')-amd64.tar.gz" | tar -C "${dest_dir}" -xzf -
	fi
	dirname "${go_binary}"
}

function _install_go {
	(
		local name=$(_normalize_name_version "${1}")
		local temp_gobin=$(mktemp -d)
		prepend_to_path "$(_bootstrap_go)"

		env GOBIN="${temp_gobin}" GOPATH="${GO_HOME}/selfpath" go install "golang.org/dl/${name}@latest" &&
			env HOME="${GO_HOME}" "${temp_gobin}/${name}" download &&
			rm -rf "${temp_gobin}"
	)
}

function use_go {
	local name=$(_normalize_name_version "${1:-gotip}")

	local dir="${GO_HOME}/sdk/${name}/bin"
	if ! [ -d "${dir}" ]; then
		_install_go "${name}"
	fi

	export GOBIN="${HOME}/bin" GOPATH="${GO_HOME}/path"
	prepend_to_path "${dir}" "${GOBIN}"
}

function update_go_tip {
	_install_go gotip && use_go tip && refresh_go_tools
}

use_go tip
